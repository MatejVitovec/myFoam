{
    const labelUList& owner = mesh.owner();
    const labelUList& neighbour = mesh.neighbour();
    const surfaceVectorField& Sf = mesh.Sf();
    const surfaceScalarField& magSf = mesh.magSf();

    forAll(mesh.cells(), celli)
    {
        const labelList& cellFaces = mesh.cells()[celli];

        scalar rAlphaRho1  = mesh.V()[celli]/dt.value() * rezAlphaRho1[celli];
        scalar rAlphaRho2  = mesh.V()[celli]/dt.value() * rezAlphaRho2[celli];
        vector rAlphaRhoU1 = mesh.V()[celli]/dt.value() * rezAlphaRhoU1[celli];
        vector rAlphaRhoU2 = mesh.V()[celli]/dt.value() * rezAlphaRhoU2[celli];
        scalar rEpsilon1   = mesh.V()[celli]/dt.value() * rezEpsilon1[celli];
        scalar rEpsilon2   = mesh.V()[celli]/dt.value() * rezEpsilon2[celli];

        forAll(cellFaces,i)
        {
            label facei = cellFaces[i];

            if (mesh.isInternalFace(facei))
            {
                label own = owner[facei];
                //label nei = neighbour[facei];

                if (own != celli)
                {
                    /*const scalar ac = lusgsOmega*( 
                        max(max(mag(U1[own] & Sf[facei]) + a1[own]*magSf[facei],
                                mag(U2[own] & Sf[facei]) + a2[own]*magSf[facei]),
                            max(mag(U1[nei] & Sf[facei]) + a1[nei]*magSf[facei],
                                mag(U2[nei] & Sf[facei]) + a2[nei]*magSf[facei])));*/

                    const scalar ac = lusgsOmega*(
                        max(mag(U1[own] & Sf[facei]), mag(U2[own] & Sf[facei])) 
                      + max(a1[own] * magSf[facei], a2[own] * magSf[facei]));
                    
                    const scalar p_1 = p[own]     + dpStar[own];
                    scalar alpha_1   = alpha[own] + dalphaStar[own];
                    vector U1_1      = U1[own]    + dU1Star[own];
                    vector U2_1      = U2[own]    + dU2Star[own];
                    scalar T1_1      = T1[own]    + dT1Star[own];
                    scalar T2_1      = T2[own]    + dT2Star[own];

                    //fluid.blendVanishingFluid(alpha_1, U1_1, U2_1, T1_1, T2_1);

                    const scalar alpha1_1 = 1.0 - alpha_1;
                    const scalar alpha2_1 = alpha_1;
                    const scalar rho1_1 = gasProps1.rho(p_1, T1_1);
                    const scalar rho2_1 = gasProps2.rho(p_1, T2_1);

                    const scalar E1   = e1[own]                 + 0.5*magSqr(U1[own]);
                    const scalar E2   = e2[own]                 + 0.5*magSqr(U2[own]);
                    const scalar E1_1 = gasProps1.Es(p_1, T1_1) + 0.5*magSqr(U1_1);
                    const scalar E2_1 = gasProps2.Es(p_1, T2_1) + 0.5*magSqr(U2_1);

                    /*const scalar rhoE1   = rho1[own]*(e1[own]              + 0.5*magSqr(U1[own]));
                    const scalar rhoE2   = rho2[own]*(e2[own]              + 0.5*magSqr(U2[own]));
                    const scalar rhoE1_1 = rho1_1*(gasProps1.Es(p_1, T1_1) + 0.5*magSqr(U1_1));
                    const scalar rhoE2_1 = rho2_1*(gasProps2.Es(p_1, T2_1) + 0.5*magSqr(U2_1));*/

                    const scalar alphaRhoPhi1   = alpha1[own]*rho1[own]*(U1[own] & Sf[facei]);
                    const scalar alphaRhoPhi2   = alpha2[own]*rho2[own]*(U2[own] & Sf[facei]);
                    const scalar alphaRhoPhi1_1 = alpha1_1*rho1_1*(U1_1 & Sf[facei]);
                    const scalar alphaRhoPhi2_1 = alpha2_1*rho2_1*(U2_1 & Sf[facei]);

                    rAlphaRho1  += 0.5*ac*(alpha1_1*rho1_1                    - alpha1[own]*rho1[own])                  - 0.5*(alphaRhoPhi1_1                                 - alphaRhoPhi1);
                    rAlphaRho2  += 0.5*ac*(alpha2_1*rho2_1                    - alpha2[own]*rho2[own])                  - 0.5*(alphaRhoPhi2_1                                 - alphaRhoPhi2); 
                    rAlphaRhoU1 += 0.5*ac*(alpha1_1*rho1_1*U1_1               - alpha1[own]*rho1[own]*U1[own])          - 0.5*((alphaRhoPhi1_1*U1_1 + alpha1_1*p_1*Sf[facei]) - (alphaRhoPhi1*U1[own] + alpha1[own]*p[own]*Sf[facei]));
                    rAlphaRhoU2 += 0.5*ac*(alpha2_1*rho2_1*U2_1               - alpha2[own]*rho2[own]*U2[own])          - 0.5*((alphaRhoPhi2_1*U2_1 + alpha2_1*p_1*Sf[facei]) - (alphaRhoPhi2*U2[own] + alpha2[own]*p[own]*Sf[facei]));
                    rEpsilon1   += 0.5*ac*(alpha1_1*(rho1_1*E1_1 + pInt[own]) - alpha1[own]*(rho1[own]*E1 + pInt[own])) - 0.5*(alphaRhoPhi1_1*(E1_1 + p_1/rho1_1)             - alphaRhoPhi1*(E1 + p[own]/rho1[own]));
                    rEpsilon2   += 0.5*ac*(alpha2_1*(rho2_1*E2_1 + pInt[own]) - alpha2[own]*(rho2[own]*E2 + pInt[own])) - 0.5*(alphaRhoPhi2_1*(E2_1 + p_1/rho2_1)             - alphaRhoPhi2*(E2 + p[own]/rho2[own]));
                }
            }
        }

        /*dpStar[celli]     = Dinv_p_alphaRho1[celli]    *rAlphaRho1 + (Dinv_p_alphaRhoU1[celli]     & rAlphaRhoU1) + Dinv_p_alphaRhoE1[celli]    *rEpsilon1 + Dinv_p_alphaRho2[celli]    *rAlphaRho2 + (Dinv_p_alphaRhoU2[celli]     & rAlphaRhoU2) + Dinv_p_alphaRhoE2[celli]    *rEpsilon2;
        dalphaStar[celli] = Dinv_alpha_alphaRho1[celli]*rAlphaRho1 + (Dinv_alpha_alphaRhoU1[celli] & rAlphaRhoU1) + Dinv_alpha_alphaRhoE1[celli]*rEpsilon1 + Dinv_alpha_alphaRho2[celli]*rAlphaRho2 + (Dinv_alpha_alphaRhoU2[celli] & rAlphaRhoU2) + Dinv_alpha_alphaRhoE2[celli]*rEpsilon2;
        dU1Star[celli]    = Dinv_U1_alphaRho1[celli]   *rAlphaRho1 + (Dinv_U1_alphaRhoU1[celli]    & rAlphaRhoU1) + Dinv_U1_alphaRhoE1[celli]   *rEpsilon1 + Dinv_U1_alphaRho2[celli]   *rAlphaRho2 + (Dinv_U1_alphaRhoU2[celli]    & rAlphaRhoU2) + Dinv_U1_alphaRhoE2[celli]   *rEpsilon2;
        dU2Star[celli]    = Dinv_U2_alphaRho1[celli]   *rAlphaRho1 + (Dinv_U2_alphaRhoU1[celli]    & rAlphaRhoU1) + Dinv_U2_alphaRhoE1[celli]   *rEpsilon1 + Dinv_U2_alphaRho2[celli]   *rAlphaRho2 + (Dinv_U2_alphaRhoU2[celli]    & rAlphaRhoU2) + Dinv_U2_alphaRhoE2[celli]   *rEpsilon2;
        dT1Star[celli]    = Dinv_T1_alphaRho1[celli]   *rAlphaRho1 + (Dinv_T1_alphaRhoU1[celli]    & rAlphaRhoU1) + Dinv_T1_alphaRhoE1[celli]   *rEpsilon1 + Dinv_T1_alphaRho2[celli]   *rAlphaRho2 + (Dinv_T1_alphaRhoU2[celli]    & rAlphaRhoU2) + Dinv_T1_alphaRhoE2[celli]   *rEpsilon2;
        dT2Star[celli]    = Dinv_T2_alphaRho1[celli]   *rAlphaRho1 + (Dinv_T2_alphaRhoU1[celli]    & rAlphaRhoU1) + Dinv_T2_alphaRhoE1[celli]   *rEpsilon1 + Dinv_T2_alphaRho2[celli]   *rAlphaRho2 + (Dinv_T2_alphaRhoU2[celli]    & rAlphaRhoU2) + Dinv_T2_alphaRhoE2[celli]   *rEpsilon2;*/
    
        Eigen::Vector<double,10> b;
        b << rAlphaRho1, rAlphaRhoU1.x(), rAlphaRhoU1.y(), rAlphaRhoU1.z(), rEpsilon1,  rAlphaRho2, rAlphaRhoU2.x(), rAlphaRhoU2.y(), rAlphaRhoU2.z(), rEpsilon2;

        //Eigen::Vector<double,10> starState = D_inv[celli].solve((Eigen::Vector<double,10>() << rAlphaRho1, rAlphaRhoU1.x(), rAlphaRhoU1.y(), rAlphaRhoU1.z(), rEpsilon1,  rAlphaRho2, rAlphaRhoU2.x(), rAlphaRhoU2.y(), rAlphaRhoU2.z(), rEpsilon2).finished());
        Eigen::Vector<double,10> starState = D_inv[celli].solve(b);

        dpStar[celli]     = starState(0);
        dalphaStar[celli] = starState(1);
        dU1Star[celli]    = vector(starState(2), starState(3), starState(4));
        dU2Star[celli]    = vector(starState(5), starState(6), starState(7));
        dT1Star[celli]    = starState(8);
        dT2Star[celli]    = starState(9);

        //std::cout << starState << std::endl << std::endl;

        //std::cin.ignore();
    }
}
